.\" Process this file with
.\" groff -man -Tascii smithproxy.1
.\"
.TH SMITHPROXY 1 "APR 2014" Linux "User Manuals"
.SH NAME
.B smithproxy 
\- agent Smith's favorite mitm proxy
.SH SYNOPSIS

.B Service operation:

.br
Smithproxy is designed to run as a system service. Please see system service named
.B smithproxy
for more information.
.br
Config files needed to run service:
.nf

   /etc/smithproxy/

         smithproxy.startup.cfg -- service and interface options
         smithproxy.cfg         -- smithproxy service configuration
         users.cfg              -- auth portal configuration (optional)

         # advanced configuration:

         smithproxy.tenants.cfg -- OPTIONAL:
                                   if present, smithproxy multi-tenancy
                                   is enabled. Each line consists of:

                         <index>;<name>;<ip4-range>;<ip6-range>; comments

                         Note: all features are supported with multi-tenancy
                                      enabled

.fi

.B Command line operation (this is usually what your DON'T want):

.nf
    smithproxy [--conf <non-default-config>] [--daemonize]
.fi

.SH Introduction
.B Smithproxy
is capturing, plain-text or SSL man-in-the-middle proxy for Linux iptables TPROXY target.
It supports SSL certificate spoofing - cloning the original certificate including
Subject and SAN, signing it with its own CA certificate.
.br
Smitproxy can also proxy UDP plaintext traffic, understands DNS.
It also acts as SOCKS5 proxy, if you prefer.

.br
It works the way that it terminates traffic intended to be forwarded on itself, and 
originating new session to the traffic target. Those sessions are then proxied by
copying bytes from one socket to another.

.B "Diagram"
.nf
    Normally without any mitm proxy:
    
      Client (conn A) ----> (Linux Router) -----X target server 
.fi

.nf
    Intercepted with smithproxy using TPROXY:
    
      Client (conn A) ----> (Linux Router).-----X target server
                                |         | 
                               TPROXY     (conn B) 
                                |         ^
                                `---X smithproxy

.fi

Despite conn A and B are in fact different connections in OS level,
.B they have the same source IP and ports.
.br
That's why you want to check
and verify routing is correct up from smithproxy, since the traffic back
to real Client's IP must find the way.
If you don't need or want transparent addresses, you can run them off in policy
in config file by enabling nat setting.


.br

.B "SSL/TLS:"
.br
Certificate spoofing uses default server certificate's private and public keys; 
certificates produced this way are cached for further use.

.br
When would use SSL inspection (enabled by default), certificate warning messages
will appear. This is because target servers' SSL certificates are resigned by 
internal CA. 

.B "SSL: How to avoid certificate warnings"
.br
You may want to install this ca root certificate "/etc/smithproxy/certs/ca-cert.pem"
file) into your 'Trusted Root CA' certificate store.
.br
.B "WARNING:"
in such a case you will unconditionally trust all certificates it resigned!

.SH CONFIG FILE
As you see, there are not much options for the command line. This is because 
we utilize quite large config file, which should be however very well readable and
self-explaining.
.br
Config file is usually located in 
.B "/etc/smithproxy/smithproxy.cfg"
, however you may override it with 
.B "--conf"
command line option.

.SH USAGE
You will typically run smithproxy as a system service. Please use config files to
control smithproxy behavior.

To troubleshoot smithproxy, use
.B smithproxy_cli
rich CLI and debugging features.
   
.SH OUTPUT
.IP Logging
Standard logging is set to errors only. Use CLI tool to set file logging level, or change loglevel in config file.

.IP "Capture directory"
Captures are organized in the structure:
.nf
   <write_payload_dir>/
      [source IP]/
         [date of capture]/
               <connection_id>.smcap -- capture file
.fi

This structure is automatically created, so you don't need to worry
to just delete it if your tests are over, or you are running out of disk space.

.IP "Capture file format - smcap"
Capture file is text file, similar to `hexdump -C' output. You can however find
several notes in there; for example if the traffic was SSL, smithproxy logs also original server's certificate.

.B Pplay
is the tool I wrote to replay it, or use it as data source for your python program (ie. for further analysis).
.B pplay
can be also used to replay it into pcap (with various limitations).

You can simply install it with:
.nf
pip install pplay
.fi

.SH PERFORMANCE on decent machine
Smithproxy is considerably fast. Using it in transparent mode, you barely recognize it's there.
It handles gigabits of plaintext traffic, and hundreds megabits of TLS traffic on normal PC.

Bottleneck is typically disk IO as it is dumping packets to files. This is however asynchronous,
so you won't see disk IO as biggest issue. It's CPU which needs to format dumped .smcap files.

.SH LIMITATIONS
  No limitations detected.


.SH FILES
.nf 
/etc/smithproxy/*
               -- config files

/etc/smithproxy/certs/defaults/
  ca-cert.pem  -- Spoofing CA certificate, issuer for spoofing server 
                  connection certificate
                  - this file should be loaded to Trusted Root CA to
                     get rid of browser certificate warnings
  ca-key.pem   -- Spoofing CA private key, signing spoofed server
                  certificate
  cl-cert.pem  -- Default server-side connection certificate 
  cl-key.pem   -- Default server-side connection private key
  srv-cert.pem -- Default client-side connection certificate 
  srv-key.pem  -- Default client-side connection private key
  
/var/local/smithproxy/data/
               -- Directory containing packet captures.

/usr/share/smithproxy/
               -- Smithproxy infrastructure python modules

/usr/share/smithproxy/www
               -- Smithproxy portal services
.fi
.RS

.SH BUGS
.br
There are almost certainly some bugs. Please feel free to log an issue on github,
or come over to our discord server.

.SH COPYLEFT
This software is released under GNU GPL license (version 2 or later). 
The underlying Socle library taking care of all that proxying/spoofing is 
licensed with LGPL version 2 or later.

.SH AUTHOR
.B "Ales Stibal" 
<astibal@mag0.net>, (c) 2014
.br

