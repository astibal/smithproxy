settings = {

    accept_tproxy = TRUE;       // global tproxy acceptor switch (via iptables TPROXY target) which turns on/off any ssl, udp, plain acceptors for that target
    accept_redirect = TRUE;     // global redirect acceptor switch (via iptables REDIRECT target) which turns on/off any ssl, udp, plain acceptors for that target
    accept_socks = TRUE;        // global socks acceptor switch, currently equivalent to socks_workers -1 (off), or any number (on)

    nameservers = [ "8.8.8.8", "8.8.4.4" ]; // specify servers used for DNS resolution (used i.e. by SOCKS and FQDN updates)
    
    certs_path = "/etc/smithproxy/certs/default/";
    certs_ca_key_password = "smithproxy";

    ca_bundle_path = "/etc/ssl/certs/";
    
    messages_dir = "/etc/smithproxy/msg/en/"; //default setting - english

    plaintext_port = "50080";   // beware, it's a string!
    plaintext_workers = 0;      // 0 = default setting -- use number of CPU threading cores detected by STL

    ssl_port = "50443";         // beware, it's a string!
    ssl_workers = 0;
    ssl_autodetect = TRUE;         //enable/disable scanning of the plaintext protocols and inspect if SSL is detected
    ssl_autodetect_harder = TRUE;  //enable/disable retries to detect SSL -- final timeout is 12.5ms, then the traffic is definitely passed.
                                   //it's by default true, but it's effective only when ssl_autodetect is set too.
                                   //if set, beware that connections will be blocked for a while, similarly as the worker too.
                                   //Suggestion: raise plaintext_workers.
    ssl_ocsp_status_ttl = 1800;    // how long is OCSP response considered valid
    ssl_crl_status_ttl  = 86400;   // how long to wait to redownload CRL

    
    udp_port = "50080";         // beware, it's a string!
    udp_workers = 0;
    udp_quick_ports = [ 0 ];   // if UDP traffic matches quick ports, it will be immediately sent out, no backwards socket will be created.
                                // "Quick" method is faster, saves sockets (file descriptors) and is more stable. All algs are supported.

                                // Not matching quick ports will create from listening socket connected socket to client, new listening socket 
                                // will be created. Due to tech. limitation of doing this, this socket is just temporary (embryonic).
                                // Traffic is processed as normal from this socket (containing initial payload), and new connection to real target is created. 
                                // When reply from target arrives, embryonic socket is closed, and new, proper connection to originator is created.
                                // This is more connection-centric approach, making possible DTLS inspection, which works on sockets directly.
                                
                                // 0 means ALL udp ports should be quick
    
    socks_workers = 0;          // 0 = default setting, -1 = don't run  -- use number of CPU threading cores detected by STL
    default_write_payload = FALSE; // write payload into files by default (policy rules will override this)
    write_payload_dir = "/var/smithproxy/data";
    write_payload_file_prefix = "";
    write_payload_file_suffix = "";
    write_pcap_single_quota = 100;

/*
    Logging levels 
    NON 0   INF 6
    FAT 1   DIA 7
    CRI 2   DEB 8
    ERR 3   DUM 9
    WAR 4   EXT 10
    NOT 5    
*/
    log_level = 6;              // INF
    log_file = "/var/log/smithproxy/messages.%s.log";   // comment this line out if you don't want to log in the file
    log_console = TRUE;                     // if log_file specified, you can control if log should be written 
                                            // additionally to stdout
                                            
    // Specialized log files
    sslkeylog_file = "/var/log/smithproxy/sslkeylog.%s.log";

    syslog_server =   "";                     // syslog server IP address
    syslog_port   =   514;                    // syslog server port
    syslog_facility = 23;                     // syslog facility; 23 = local7
    syslog_level    = 6;                      // logging level (6 is Informational)
    syslog_family   = 4;                      // 4 = IPv4, or 6 = IPv6; whatever else or no setting implies IPv4
    
    cli = {
        port = 50000;
        enable_password = "";
    }
    auth_portal = {                          // WARNING: active authentication will not work without detect profile and some signatures (min www/get|post)!
        address    = "192.168.254.1";        // when authentication portal should be displayed, redirect will go here (where webfr.py listens)
        address6   = "[2002:5f8f:81be:2::1]";  // above for IPv6
        http_port  = "8008";                 // which port webfr.py listens on
        https_port = "8043";                 // which port ssl webfr.py listens on
        ssl_key    = "portal-key.pem";	     // relative to settings.certs_path
        ssl_cert   = "portal-cert.pem";      // relative to settings.certs_path
        magic_ip   = "1.2.3.4";              // virtual IP which redirects user to correct auth portal (tenant aware)
    }
    web_rating = {
        // wot is not yet implemented
        wot_key = "57a92fd16754f60359c4d7fb6dd8b5ea7a26039f";  //this is only example API key which will NOT work.
    }

    socks = {
        async_dns = TRUE;
    }
}

debug = {
    log_data_crc = FALSE;
    log_sockets  = FALSE;
    log_online_cx_name = FALSE;             // This could have heavy impact on performance, but will resolve CX name again 
                                            // whenever log is generated
    log_srclines = FALSE;                   // if message level is >= DIA, should we write source and line number?
    log_srclines_always = FALSE;            // should we write source and line number (overrides the above)?
    
    // Logging overrides table:
    // logging facility log_level will be overridden for specified module, if its higher than general log level.
    log = {
         //sslcom = 6;
         //sslmitmcom = 6;
         //sslcertstore = 6;
         //proxy = 6;
         //mtrace = FALSE;
         //openssl_mem_dbg = FALSE;
         //alg_dns = 6;
    }
}

address_objects = {
    any = {
        type = 0;
        cidr = "0.0.0.0/0";
    }
    any6 = {
        type = 0;
        cidr = "::/0";
    }
}

port_objects = {
    all = {
        start = 0;
        end = 65535;
    }
    dns = {
        start = 53;
        end = 53;
    }
}

/*
 ICMP = 1
 TCP  = 6
 UDP  = 17
*/

proto_objects = {
    tcp = {
        id = 6;
    }
    udp = {
        id = 17;
    }
}

/*
 Detection modes:
 0 - NONE - no detection at all
 1 - PRE  - detect based on peeked data (not read yet, or salvaged data from read buffer, if read process was faster) and write buffer data (not written yet)
 2 - POST - detect based on received/sent data -- no reason to set it - useful for connections when peek doesn't seem to be reliable or generally doesn't work.
*/

detection_profiles = {
    default = {
        mode = 0;
    }
    detect = {
        mode = 1;
    }
}

captures =
{
  local =
  {
    enabled = true
    dir = "/var/smithproxy/data"
    file_prefix = ""
    file_suffix = ""
    pcap_quota = 100
    format = "pcap_single"
  }
  remote =
  {
    enabled = false
    tun_type = "gre"
    tun_dst = "127.0.0.1"
    tun_ttl = 1
  }
}

content_profiles = {
    default = {
        write_payload = FALSE;
        write_format = "pcap_single";
        write_limit_client = 0;
        write_limit_server = 0;
    }
    evil = {
        write_payload = FALSE;
        write_format = "pcap_single";
        write_limit_client = 0;
        write_limit_server = 0;
        content_rules = (
            {
                match = "Accept-Encoding:[^\r]+\r\n";
                replace = "";
            },
            {
                match = "Public-Key-Pins:[^\r]+\r\n";
                replace = "";
            },
            {
                match = "Strict-Transport-Security:[^\r]+\r\n";
                replace = "";
            }
        )
    }
    
}

// this is not yet implemented
tls_ca = {
    default = {
      path = "/etc/smithproxy/certs/ca/default/";
    }
}

tls_profiles = {
    default = {
        inspect = TRUE;
        use_pfs = TRUE;     // enable/disable DHE and ECDHE (perfect forward secrecy)
        left_use_pfs = TRUE;  // override use_pfs setting in direction from client to smithproxy (by default TRUE)
        right_use_pfs = TRUE; // override use_pfs setting in direction from smithproxy to target server (by default TRUE)
        
        left_disable_reuse = FALSE; //set to TRUE to disable abbreviated handshake in direction from client to smithproxy (default FALSE)
        right_disable_reuse = FALSE;//set to TRUE to disable abbreviated handshake in direction from smithproxy to target server (default FALSE)
        
        allow_untrusted_issuers = FALSE;
        allow_invalid_certs = FALSE;
        allow_self_signed = FALSE;
        
        failed_certcheck_replacement = TRUE; // html page is displayed instead of connection reset
        
        redirect_warning_ports = [ 443, 44443 ]; // set port list, on which we should replace content if there is SSL problem. Other will be dropped.
                                                 // if no list is provided, we assume only port 443 should be replaced.
                                                 
        failed_certcheck_override = FALSE;       // failed ssl replacement will contain option to temporarily allow the connection for the source IP.
        failed_certcheck_override_timeout = 600; // if failed ssl override is active, this is the timeout.  
        
        //ca_list = "default"; // not yet implemented

        ocsp_mode = 0;        //  0 = disable OCSP checks ; 1 = check only end certificate ; 2 = check all certificates
        ocsp_stapling = TRUE;
        ocsp_stapling_mode = 0; // possible values: 
                                      // 0 = loose - if response is present - check. All connections are allowed, but complain in log if OCSP is missing, or is not verified.
                                      // 1 = strict - if response is present - check, don't allow unverified connections. Connections without OCSP response will be logged, but allowed.
                                      // 2 = require - require all connections to reply with OCSP stapling + be strict. This is dangerous and is only good for special purposes.

        sni_filter_bypass = [ "[^.]\.skype.com", "single-host.example.com" ];
        sni_filter_use_dns_cache = TRUE;        // if sni_filter_bypass is set, check during policy match if target IP isn't in DNS cache matching SNI filter entries.
                                                // For example: 
                                                // Connection to 1.1.1.1 policy check will look in all SNI filter entries ["abc.com","mybank.com"] and will try to find them in DNS cache. 
                                                // Sni filter entry mybank.com is found in DNS cache pointing to 1.1.1.1. Connection is bypassed.
                                                // Load increases with SNI filter length linearly, but DNS cache lookup is fast.
                                                // DNS cache has to be active this to be working.

        sni_filter_use_dns_domain_tree = TRUE;  // check IP address in full domain tree for each SNI filter entry.
                                                // if SNI filter entry can't be found in DNS cache, try to look in all DNS subdomains of SNI filter entries.
                                                // Example:
                                                // Consider SNI filter from previous example. You are now connecting to ip 2.2.2.2. 
                                                // Based on previous DNS traffic, there is subdomain cache for "mybank.com" filled with entries "www" and "ecom".
                                                // Both "www" and "ecom" are searched in DNS cache. www points to 1.1.1.1, but ecom points to 2.2.2.2. 
                                                // Connection is bypassed.
                                                // DNS cache has to active and sni_filter_use_dns_cache enabled before this feature can be activated. 
                                                // Current Limitation: works only for SNI filter 2nd level DNS domain entries (like mybank.com)
                                                // Load increases with SNI filter size and subdomain cache, both linearly, so it's intensive feature.
        sslkeylog = FALSE;
    }
    bypass = {
        inspect = FALSE;
    }
}

auth_profiles = {
    login = {
        authenticate = TRUE;
        resolve = TRUE;
        identities = {
            peoples = {}
        }
    }
    resolve = {
        authenticate = FALSE;
        resolve = TRUE;
    }
}


alg_dns_profiles = {
    dns_default = {
        match_request_id = TRUE;
        randomize_id = FALSE;
        cached_responses = TRUE;
    }
}


routing = {
}

/*
    NAT valid values are: "none" "auto" to be added in future: "<address_objects>:[<port_objects>]"
*/
policy = (
    {
        proto = "udp";
        src = [ "any", "any6" ];
        sport = [ "all" ];
        dst = [ "any", "any6" ];
        dport = [ "dns" ];
        tls_profile = "default";
        detection_profile = "detect";
        content_profile = "default";
        auth_profile = "resolve";
        alg_dns_profile = "dns_default";
        action = "accept";
        nat = "auto";
        routing = "none";
    },
    {
        proto = "udp";
        src = [ "any", "any6" ];
        sport = [ "all" ];
        dst = [ "any", "any6" ];
        dport = [ "all" ];
        action = "accept";
        nat = "auto";
        routing = "none";
    },
    {
        proto = "tcp";
        src = [ "any", "any6" ];
        sport = [ "all" ];
        dst = [ "any", "any6" ];
        dport = [ "all" ];
        tls_profile = "default";
        detection_profile = "detect";
        content_profile = "default";
        auth_profile = "resolve";
        alg_dns_profile = "dns_default";
        action = "accept";
        nat = "auto";
        routing = "none";
    }
)


starttls_signatures = (
    {
        cat  = "mail";
        name = "smtp/starttls";
        side = "client";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "^STARTTLS";
                bytes_start = 0;
                bytes_max = 16;
            },
            {
                side = "w";
                type = "regex";
                signature = "^2[0-5]0 ";
                bytes_start = 0;
                bytes_max = 16;
            }
        )
    },
    {
        cat  = "mail";
        name = "imap/starttls";
        side = "client";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = ". STARTTLS\r\n";
                bytes_start = 0;
                bytes_max = 16;
            },
            {
                side = "w";
                type = "regex";
                signature = ". OK";
                bytes_start = 0;
                bytes_max = 64;
            }
        )
    },
    {
        cat  = "mail";    
        name = "pop3/starttls";
        side = "client";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "^STLS\r\n";
                bytes_start = 0;
                bytes_max = 10;
            },
            {
                side = "w";
                type = "regex";
                signature = "^[+]OK";
                bytes_start = 0;
                bytes_max = 15;
            }
        )
    },
    {
        cat  = "file";
        name = "ftp/starttls";
        side = "client";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "^AUTH TLS\r\n";
                bytes_start = 0;
                bytes_max = 10;
            },
            {
                side = "w";
                type = "regex";
                signature = "^[2][0-9][0-9] AUTH";
                bytes_start = 0;
                bytes_max = 15;
            }
        )
    },
    {
        cat  = "im";    
        name = "xmpp/starttls";
        side = "client";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "^<starttls [^>/]+xmpp-tls[^>/]/>";
                bytes_start = 0;
                bytes_max = 64;
            },
            {
                side = "w";
                type = "regex";
                signature = "^<proceed [^>/]+xmpp-tls[^>/]/>";
                bytes_start = 0;
                bytes_max = 64;
            }
        )
    },
    {
        cat  = "www";    
        name = "http-proxy/starttls";
        side = "client";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "^CONNECT [^ ]+:443[^\r]*\r\n";
                bytes_start = 0;
                bytes_max = 200;
            },
            {
                side = "w";
                type = "regex";
                signature = "^HTTP/1.[01] 2[0-9][0-9][^r]*\r\n";
                bytes_start = 0;
                bytes_max = 64;
            }
        )
    }
)

detection_signatures = (
    {
        cat  = "www";    
        name = "http/request";
        side = "client";
        group = "base";
        enables = "http"
        engine = "http1"
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "^(GET|POST|PUT|HEAD|DELETE|PATCH|OPTIONS|TRACE) +([^ \r\n]+)";
                bytes_start = 0;
                bytes_max = 200;
            }
        )
    },
    {
        cat  = "www";    
        name = "http/get|post+reply";
        side = "client";
        group = "http";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "^(GET|POST) +([^ \r\n]+)";
                bytes_start = 0;
                bytes_max = 64;
            },
            {
                side = "w";
                type = "regex";
                signature = "HTTP/1.[01] +([1-5][0-9][0-9]) ";
                bytes_start = 0;
                bytes_max = 64;
            }
        )
    },
    {
        cat  = "av";
        name = "virus/eicar";
        side = "client";
        group = "base";
        flow = (
            {
                side = "w";
                type = "simple";
                signature = "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*";
                bytes_start = 0;
                bytes_max = 200000;
            }
        )
    },
    {
        cat  = "www";
        name = "set-cookie";
        side = "client";
        group = "http";
        flow = (
            {
                side = "w";
                type = "regex";
                signature = "Set-Cookie: ?([^\r\n]+)";
                bytes_start = 0;
                bytes_max = 20000;
            }
        )
    },
    {
        cat  = "www";
        name = "cookie";
        side = "client";
        group = "http";
        flow = (
            {
                side = "r";
                type = "regex";
                signature = "Cookie: ?([^\r\n]+)";
                bytes_start = 0;
                bytes_max = 20000;
            }
        )
    },
    {
        name = "DoH"
        cat = "www"
        side = "client"
        severity = 7
        group = "http"
        flow = (
            {
                side = "r"
                type = "regex"
                bytes_start = 0
                bytes_max = 200
                signature = "^(GET|POST) +/dns-query\?"
            }
        )
    },
    {
        name = "http2/start"
        cat = "www"
        side = "client"
        severity = 7
        group = "base"
        enables = "http2"
        engine = "http2"
        flow = (
            {
                side = "r"
                type = "regex"
                bytes_start = 0
                bytes_max = 200
                signature = "PRI +\* +HTTP/2.0\r\n\r\nSM\r\n\r\n"
            } )
    }
)
